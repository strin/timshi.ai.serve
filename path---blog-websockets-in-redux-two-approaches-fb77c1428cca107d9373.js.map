{"version":3,"sources":["webpack:///path---blog-websockets-in-redux-two-approaches-fb77c1428cca107d9373.js","webpack:///./.cache/json/blog-websockets-in-redux-two-approaches.json"],"names":["webpackJsonp","426","module","exports","data","butterPost","slug","url","published","title","body","summary","seo_title","meta_description","author","first_name","last_name","twitter_handle","pathContext","_PARENT"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,YAAcC,KAAA,qCAAAC,IAAA,iEAAAC,UAAA,uBAAAC,MAAA,iDAAAC,KAAA,+zHAAguHC,QAAA,+CAAAC,UAAA,sCAAAC,iBAAA,wDAAAC,QAAqfC,WAAA,MAAAC,UAAA,WAAAC,eAAA,kBAA4EC,aAAgBZ,KAAA,qCAAAa,QAAA","file":"path---blog-websockets-in-redux-two-approaches-fb77c1428cca107d9373.js","sourcesContent":["webpackJsonp([137919165668068],{\n\n/***/ 426:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"butterPost\":{\"slug\":\"websockets-in-redux-two-approaches\",\"url\":\"http://youfoundron.com/blog/websockets-in-redux-two-approaches\",\"published\":\"2017-06-19T14:28:00Z\",\"title\":\"WebSockets in Redux: Write Your Own Middleware\",\"body\":\"<p>Using Redux to manage state in your React application is great, but sifting through best patterns&nbsp;for handling async actions can sometimes have you&nbsp;questioning&nbsp;your design choices. I'd like to put forward two approaches to handling WebSockets that I've found useful with&nbsp;Redux.</p>\\r\\n<p>The first approach, and the one&nbsp;I will cover in this post, is to write&nbsp;your own middleware.</p>\\r\\n<p>Sound scary? It isn't! Check it out:</p>\\r\\n<pre class=\\\"language-javascript\\\"><code>// First let's write some action types\\r\\nconst types = {\\r\\n  SOCKET_OPEN: 'SOCKET_OPEN',\\r\\n  SOCKET_CLOSE: 'SOCKET_CLOSE',\\r\\n  SOCKET_ERROR: 'SOCKET_ERROR',\\r\\n  SOCKET_MESSAGE: 'SOCKET_MESSAGE',\\r\\n  SOCKET_CONNECT: 'SOCKET_CONNECT'\\r\\n}\\r\\n\\r\\n// Next let's write some action creators for handling socket activity\\r\\nconst actionCreators = {\\r\\n  socketOpen: e =&gt; ({ type: types.SOCKET_OPEN }),\\r\\n  socketClose: e =&gt; ({ type: types.SOCKET_CLOSE }),\\r\\n  socketError: err =&gt; ({ type: types.SOCKET_ERROR, payload: err }),\\r\\n  socketMessage: e =&gt; ({ type: types.SOCKET_MESSAGE, payload: JSON.parse(e.data) }),\\r\\n  socketConnect: e =&gt; ({ type: types.SOCKET_CONNECT })\\r\\n}</code></pre>\\r\\n<p>With me so far? Alright well now it's time to write the middleware itself:</p>\\r\\n<pre class=\\\"language-javascript\\\"><code>import { bindActionCreators } from 'redux'\\r\\n\\r\\n// Here we write the function for creating our middleware\\r\\n// Let's break down these arguments...\\r\\nconst createSocketMiddleware = (\\r\\n  socketURL, // the url our socket connects to\\r\\n  subscribeData, // the handshake data our socket will send once connected (optional)\\r\\n  shouldInstantiate, // a predicate function to know when to connect our socket\\r\\n  eventHandlers // the actions we want our socket to dispatch\\r\\n) =&gt; store =&gt; next =&gt; action =&gt; {\\r\\n  if (shouldInstantiate(action)) {\\r\\n    // instantiate the web socket\\r\\n    const ws = new window.WebSocket(socketURl)\\r\\n    // bind eventHandlers to dispatch\\r\\n    const boundEventHandlers = bindActionCreators(eventHandlers, store.dispatch)\\r\\n    // fire onopen event, and fire off a subscribe message with our handshake data\\r\\n    ws.onopen = e =&gt; {\\r\\n      boundEventHandlers.onopen(e)\\r\\n      ws.send(JSON.stringify({ type: 'subscribe', ...subscribeData }))\\r\\n    }\\r\\n    // assign remaining event handlers\\r\\n    ws.onclose = boundEventHandlers.onclose\\r\\n    ws.onerror = boundEventHandlers.onerror\\r\\n    ws.onmessage = boundEventHandlers.onmessage\\r\\n  } else {\\r\\n    return next(action)\\r\\n  }\\r\\n}</code></pre>\\r\\n<p>Finally we'll&nbsp;create a&nbsp;middleware instance&nbsp;and add it to our store:</p>\\r\\n<pre class=\\\"language-javascript\\\"><code>import { createStore, applyMiddleware } from 'redux'\\r\\n\\r\\n/* \\r\\n  ...our previous code, an initialState, and a rootReducer...\\r\\n*/\\r\\n\\r\\nconst mySocketURL = 'wss://ws-feed.a-website.com'\\r\\nconst mySubscribeData = { rotationalAxisIds: ['x', 'y', 'z'] }\\r\\nconst mySocketPredicate = action =&gt; action.type === types.SOCKET_CONNECT\\r\\nconst myEventHandlers = {\\r\\n  onopen: actionCreators.socketOpen,\\r\\n  onclose: actionCreators.socketClose,\\r\\n  onerror: actionCreators.socketError,\\r\\n  onmessage: actionCreators.socketMessage\\r\\n}\\r\\n\\r\\nconst mySocketMiddleware = createSocketMiddleware(\\r\\n  mySocketURL,\\r\\n  mySubscribeData,\\r\\n  mySocketPredicate,\\r\\n  myEventHandlers\\r\\n)\\r\\n\\r\\nconst store = createStore(rootReducer, initialState, applyMiddleware(mySocketMiddleware))</code></pre>\\r\\n<p>In a connected component dispatch&nbsp;the&nbsp;<code>socketConnect</code> action on <code>componentWillMount</code> and you're good to go!</p>\\r\\n<p>In <a href=\\\"http://youfoundron.com/blog/websockets-in-redux-using-sagas\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">part two</a> we'll cover using Redux Sagas' <code>eventChannel</code> factory...</p>\",\"summary\":\"Writing our own socket middleware for Redux.\",\"seo_title\":\"WebSockets in Redux: Two Approaches\",\"meta_description\":\"Part One. Write your own socket middleware for Redux.\",\"author\":{\"first_name\":\"Ron\",\"last_name\":\"Gierlach\",\"twitter_handle\":\"@youfoundron\"}}},\"pathContext\":{\"slug\":\"websockets-in-redux-two-approaches\",\"_PARENT\":\"SOURCE\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-websockets-in-redux-two-approaches-fb77c1428cca107d9373.js","module.exports = {\"data\":{\"butterPost\":{\"slug\":\"websockets-in-redux-two-approaches\",\"url\":\"http://youfoundron.com/blog/websockets-in-redux-two-approaches\",\"published\":\"2017-06-19T14:28:00Z\",\"title\":\"WebSockets in Redux: Write Your Own Middleware\",\"body\":\"<p>Using Redux to manage state in your React application is great, but sifting through best patterns&nbsp;for handling async actions can sometimes have you&nbsp;questioning&nbsp;your design choices. I'd like to put forward two approaches to handling WebSockets that I've found useful with&nbsp;Redux.</p>\\r\\n<p>The first approach, and the one&nbsp;I will cover in this post, is to write&nbsp;your own middleware.</p>\\r\\n<p>Sound scary? It isn't! Check it out:</p>\\r\\n<pre class=\\\"language-javascript\\\"><code>// First let's write some action types\\r\\nconst types = {\\r\\n  SOCKET_OPEN: 'SOCKET_OPEN',\\r\\n  SOCKET_CLOSE: 'SOCKET_CLOSE',\\r\\n  SOCKET_ERROR: 'SOCKET_ERROR',\\r\\n  SOCKET_MESSAGE: 'SOCKET_MESSAGE',\\r\\n  SOCKET_CONNECT: 'SOCKET_CONNECT'\\r\\n}\\r\\n\\r\\n// Next let's write some action creators for handling socket activity\\r\\nconst actionCreators = {\\r\\n  socketOpen: e =&gt; ({ type: types.SOCKET_OPEN }),\\r\\n  socketClose: e =&gt; ({ type: types.SOCKET_CLOSE }),\\r\\n  socketError: err =&gt; ({ type: types.SOCKET_ERROR, payload: err }),\\r\\n  socketMessage: e =&gt; ({ type: types.SOCKET_MESSAGE, payload: JSON.parse(e.data) }),\\r\\n  socketConnect: e =&gt; ({ type: types.SOCKET_CONNECT })\\r\\n}</code></pre>\\r\\n<p>With me so far? Alright well now it's time to write the middleware itself:</p>\\r\\n<pre class=\\\"language-javascript\\\"><code>import { bindActionCreators } from 'redux'\\r\\n\\r\\n// Here we write the function for creating our middleware\\r\\n// Let's break down these arguments...\\r\\nconst createSocketMiddleware = (\\r\\n  socketURL, // the url our socket connects to\\r\\n  subscribeData, // the handshake data our socket will send once connected (optional)\\r\\n  shouldInstantiate, // a predicate function to know when to connect our socket\\r\\n  eventHandlers // the actions we want our socket to dispatch\\r\\n) =&gt; store =&gt; next =&gt; action =&gt; {\\r\\n  if (shouldInstantiate(action)) {\\r\\n    // instantiate the web socket\\r\\n    const ws = new window.WebSocket(socketURl)\\r\\n    // bind eventHandlers to dispatch\\r\\n    const boundEventHandlers = bindActionCreators(eventHandlers, store.dispatch)\\r\\n    // fire onopen event, and fire off a subscribe message with our handshake data\\r\\n    ws.onopen = e =&gt; {\\r\\n      boundEventHandlers.onopen(e)\\r\\n      ws.send(JSON.stringify({ type: 'subscribe', ...subscribeData }))\\r\\n    }\\r\\n    // assign remaining event handlers\\r\\n    ws.onclose = boundEventHandlers.onclose\\r\\n    ws.onerror = boundEventHandlers.onerror\\r\\n    ws.onmessage = boundEventHandlers.onmessage\\r\\n  } else {\\r\\n    return next(action)\\r\\n  }\\r\\n}</code></pre>\\r\\n<p>Finally we'll&nbsp;create a&nbsp;middleware instance&nbsp;and add it to our store:</p>\\r\\n<pre class=\\\"language-javascript\\\"><code>import { createStore, applyMiddleware } from 'redux'\\r\\n\\r\\n/* \\r\\n  ...our previous code, an initialState, and a rootReducer...\\r\\n*/\\r\\n\\r\\nconst mySocketURL = 'wss://ws-feed.a-website.com'\\r\\nconst mySubscribeData = { rotationalAxisIds: ['x', 'y', 'z'] }\\r\\nconst mySocketPredicate = action =&gt; action.type === types.SOCKET_CONNECT\\r\\nconst myEventHandlers = {\\r\\n  onopen: actionCreators.socketOpen,\\r\\n  onclose: actionCreators.socketClose,\\r\\n  onerror: actionCreators.socketError,\\r\\n  onmessage: actionCreators.socketMessage\\r\\n}\\r\\n\\r\\nconst mySocketMiddleware = createSocketMiddleware(\\r\\n  mySocketURL,\\r\\n  mySubscribeData,\\r\\n  mySocketPredicate,\\r\\n  myEventHandlers\\r\\n)\\r\\n\\r\\nconst store = createStore(rootReducer, initialState, applyMiddleware(mySocketMiddleware))</code></pre>\\r\\n<p>In a connected component dispatch&nbsp;the&nbsp;<code>socketConnect</code> action on <code>componentWillMount</code> and you're good to go!</p>\\r\\n<p>In <a href=\\\"http://youfoundron.com/blog/websockets-in-redux-using-sagas\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">part two</a> we'll cover using Redux Sagas' <code>eventChannel</code> factory...</p>\",\"summary\":\"Writing our own socket middleware for Redux.\",\"seo_title\":\"WebSockets in Redux: Two Approaches\",\"meta_description\":\"Part One. Write your own socket middleware for Redux.\",\"author\":{\"first_name\":\"Ron\",\"last_name\":\"Gierlach\",\"twitter_handle\":\"@youfoundron\"}}},\"pathContext\":{\"slug\":\"websockets-in-redux-two-approaches\",\"_PARENT\":\"SOURCE\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-websockets-in-redux-two-approaches.json\n// module id = 426\n// module chunks = 137919165668068"],"sourceRoot":""}