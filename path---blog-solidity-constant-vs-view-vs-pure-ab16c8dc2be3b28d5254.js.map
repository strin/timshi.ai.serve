{"version":3,"sources":["webpack:///path---blog-solidity-constant-vs-view-vs-pure-ab16c8dc2be3b28d5254.js","webpack:///./.cache/json/blog-solidity-constant-vs-view-vs-pure.json"],"names":["webpackJsonp","425","module","exports","data","butterPost","slug","url","published","title","body","summary","seo_title","meta_description","author","first_name","last_name","twitter_handle","pathContext","_PARENT"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,YAAcC,KAAA,oCAAAC,IAAA,gEAAAC,UAAA,uBAAAC,MAAA,+CAAAC,KAAA,uyEAAsyEC,QAAA,2CAAAC,UAAA,+CAAAC,iBAAA,8IAAAC,QAA+fC,WAAA,MAAAC,UAAA,WAAAC,eAAA,kBAA4EC,aAAgBZ,KAAA,oCAAAa,QAAA","file":"path---blog-solidity-constant-vs-view-vs-pure-ab16c8dc2be3b28d5254.js","sourcesContent":["webpackJsonp([13229645212918],{\n\n/***/ 425:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"butterPost\":{\"slug\":\"solidity-constant-vs-view-vs-pure\",\"url\":\"http://youfoundron.com/blog/solidity-constant-vs-view-vs-pure\",\"published\":\"2017-09-23T00:00:00Z\",\"title\":\"Solidity Functions: Constant vs View vs Pure\",\"body\":\"<p>As of <a href=\\\"https://github.com/ethereum/solidity/releases/tag/v0.4.17\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Solc 0.4.17</a>, two new&nbsp;function modifiers have been introduced in lieu of <code>constant</code> -- they are <code>view</code> and <code>pure</code>. These are exciting additions&nbsp;that offer us the chance to write more expressive contracts.</p>\\r\\n<p>Previously, functions marked <code>constant</code> were functions that did not change any state values of&nbsp;a contract. By marking them as such, the compiler could know&nbsp;that storage data&nbsp;would not be written&nbsp;as a result of the&nbsp;function call and consequently&nbsp;no network verification&nbsp;would be required. No transaction&nbsp;to mine, meant no gas needed to be spent -- just read that data right off the blockchain! These functions were essentially look-ups for data held in or derived from a contract's state.</p>\\r\\n<p>However, the term \\\"constant\\\", already being used to mark variables as read-only,&nbsp;was&nbsp;too vague&nbsp;to communicate&nbsp;such intent. It has been deprecated in favor of the more accurately named&nbsp;<code>view</code> modifier. After all, what we are&nbsp;asking when we call these functions is to&nbsp;<em>view</em>&nbsp;some data on the blockchain.</p>\\r\\n<p>The <code>pure</code> modifier comes from&nbsp;the&nbsp;functional programmer's vernacular. In FP, to describe a function as \\\"pure\\\"&nbsp;is to say all the data&nbsp;the function is concerned with is either passed in or defined in its scope. So it should stand as no surprise that <code>pure</code> functions in Solidity are not allowed to even&nbsp;read (let alone write) storage data. What's the&nbsp;benefit in&nbsp;this you might wonder? Well a lot actually,&nbsp;<code>pure</code> functions retain&nbsp;<code>view</code>'s&nbsp;transaction-free benefits and are great for internal&nbsp;helpers&nbsp;and utilities relating to tasks like&nbsp;calculation, permission, and typecasting.</p>\\r\\n<p>I hope I've cleared the air on these new modifiers and have encouraged the writing of safer, more expressive contracts.&nbsp;For more information you can refer to the <a href=\\\"http://solidity.readthedocs.io/en/develop/contracts.html#view-functions\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">official docs</a>.</p>\\r\\n<p>Now get coding!</p>\",\"summary\":\"Function modifier differences explained.\",\"seo_title\":\"Solidity Functions: Constant vs View vs Pure\",\"meta_description\":\"What are the differences between the \\\"constant\\\", \\\"view\\\", and \\\"pure\\\" modifiers in Solidity? Write better and safer smart contract functions.\",\"author\":{\"first_name\":\"Ron\",\"last_name\":\"Gierlach\",\"twitter_handle\":\"@youfoundron\"}}},\"pathContext\":{\"slug\":\"solidity-constant-vs-view-vs-pure\",\"_PARENT\":\"SOURCE\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-solidity-constant-vs-view-vs-pure-ab16c8dc2be3b28d5254.js","module.exports = {\"data\":{\"butterPost\":{\"slug\":\"solidity-constant-vs-view-vs-pure\",\"url\":\"http://youfoundron.com/blog/solidity-constant-vs-view-vs-pure\",\"published\":\"2017-09-23T00:00:00Z\",\"title\":\"Solidity Functions: Constant vs View vs Pure\",\"body\":\"<p>As of <a href=\\\"https://github.com/ethereum/solidity/releases/tag/v0.4.17\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Solc 0.4.17</a>, two new&nbsp;function modifiers have been introduced in lieu of <code>constant</code> -- they are <code>view</code> and <code>pure</code>. These are exciting additions&nbsp;that offer us the chance to write more expressive contracts.</p>\\r\\n<p>Previously, functions marked <code>constant</code> were functions that did not change any state values of&nbsp;a contract. By marking them as such, the compiler could know&nbsp;that storage data&nbsp;would not be written&nbsp;as a result of the&nbsp;function call and consequently&nbsp;no network verification&nbsp;would be required. No transaction&nbsp;to mine, meant no gas needed to be spent -- just read that data right off the blockchain! These functions were essentially look-ups for data held in or derived from a contract's state.</p>\\r\\n<p>However, the term \\\"constant\\\", already being used to mark variables as read-only,&nbsp;was&nbsp;too vague&nbsp;to communicate&nbsp;such intent. It has been deprecated in favor of the more accurately named&nbsp;<code>view</code> modifier. After all, what we are&nbsp;asking when we call these functions is to&nbsp;<em>view</em>&nbsp;some data on the blockchain.</p>\\r\\n<p>The <code>pure</code> modifier comes from&nbsp;the&nbsp;functional programmer's vernacular. In FP, to describe a function as \\\"pure\\\"&nbsp;is to say all the data&nbsp;the function is concerned with is either passed in or defined in its scope. So it should stand as no surprise that <code>pure</code> functions in Solidity are not allowed to even&nbsp;read (let alone write) storage data. What's the&nbsp;benefit in&nbsp;this you might wonder? Well a lot actually,&nbsp;<code>pure</code> functions retain&nbsp;<code>view</code>'s&nbsp;transaction-free benefits and are great for internal&nbsp;helpers&nbsp;and utilities relating to tasks like&nbsp;calculation, permission, and typecasting.</p>\\r\\n<p>I hope I've cleared the air on these new modifiers and have encouraged the writing of safer, more expressive contracts.&nbsp;For more information you can refer to the <a href=\\\"http://solidity.readthedocs.io/en/develop/contracts.html#view-functions\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">official docs</a>.</p>\\r\\n<p>Now get coding!</p>\",\"summary\":\"Function modifier differences explained.\",\"seo_title\":\"Solidity Functions: Constant vs View vs Pure\",\"meta_description\":\"What are the differences between the \\\"constant\\\", \\\"view\\\", and \\\"pure\\\" modifiers in Solidity? Write better and safer smart contract functions.\",\"author\":{\"first_name\":\"Ron\",\"last_name\":\"Gierlach\",\"twitter_handle\":\"@youfoundron\"}}},\"pathContext\":{\"slug\":\"solidity-constant-vs-view-vs-pure\",\"_PARENT\":\"SOURCE\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-solidity-constant-vs-view-vs-pure.json\n// module id = 425\n// module chunks = 13229645212918"],"sourceRoot":""}